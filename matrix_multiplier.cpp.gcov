        -:    0:Source:matrix_multiplier.cpp
        -:    0:Graph:matrix_multiplier.gcno
        -:    0:Data:matrix_multiplier.gcda
        -:    0:Runs:3
        -:    1:#include "matrix_multiplier.h"
        -:    2:
        -:    3:// Function for naive matrix multiplication O(n^3)
        3:    4:Matrix multiplyMatrices(const Matrix& A, const Matrix& B) {
        3:    5:    if (A.cols() != B.rows()) {
        1:    6:        throw std::invalid_argument("Matrix dimensions do not allow multiplication");
        -:    7:    }
        -:    8:
        2:    9:    Matrix result(A.rows(), B.cols());
        -:   10:
        6:   11:    for (size_t i = 0; i < A.rows(); i++) {
       12:   12:        for (size_t j = 0; j < B.cols(); j++) {
       28:   13:            for (size_t k = 0; k < A.cols(); k++) {
       20:   14:                result(i, j) += A(i, k) * B(k, j);
        -:   15:            }
        -:   16:        }
        -:   17:    }
        -:   18:
        2:   19:    return result;
        -:   20:}
        -:   21:
        -:   22:// Winogradâ€™s algorithm matrix multiplication
        4:   23:Matrix winogradMultiply(const Matrix& A, const Matrix& B) {
        4:   24:    if (A.cols() != B.rows()) {
    #####:   25:        throw std::invalid_argument("Matrix dimensions do not allow multiplication");
        -:   26:    }
        -:   27:
        4:   28:    size_t m = A.rows(), n = A.cols(), p = B.cols();
        4:   29:    Matrix result(std::vector<std::vector<int>>(m, std::vector<int>(p, 0)));
        -:   30:
        -:   31:    // Compute row factors
        4:   32:    std::vector<int> rowFactor(m, 0);
     1008:   33:    for (size_t i = 0; i < m; i++) {
   251008:   34:        for (size_t j = 0; j < n / 2; j++) {
   250004:   35:            rowFactor[i] += A(i, 2 * j) * A(i, 2 * j + 1);
        -:   36:        }
        -:   37:    }
        -:   38:
        -:   39:    // Compute column factors
        4:   40:    std::vector<int> colFactor(p, 0);
     1008:   41:    for (size_t j = 0; j < p; j++) {
   251008:   42:        for (size_t i = 0; i < n / 2; i++) {
   250004:   43:            colFactor[j] += B(2 * i, j) * B(2 * i + 1, j);
        -:   44:        }
        -:   45:    }
        -:   46:
        -:   47:    // Main computation
     1008:   48:    for (size_t i = 0; i < m; i++) {
   501012:   49:        for (size_t j = 0; j < p; j++) {
   500008:   50:            result(i, j) = -rowFactor[i] - colFactor[j];
125500016:   51:            for (size_t k = 0; k < n / 2; k++) {
125000008:   52:                result(i, j) += (A(i, 2 * k) + B(2 * k + 1, j)) * (A(i, 2 * k + 1) + B(2 * k, j));
        -:   53:            }
        -:   54:        }
        -:   55:    }
        -:   56:
        -:   57:    // Handle odd case when n is odd
        4:   58:    if (n % 2 == 1) {
        3:   59:        for (size_t i = 0; i < m; i++) {
        6:   60:            for (size_t j = 0; j < p; j++) {
        4:   61:                result(i, j) += A(i, n - 1) * B(n - 1, j);
        -:   62:            }
        -:   63:        }
        -:   64:    }
        -:   65:
        8:   66:    return result;
        4:   67:}
        -:   68:
        -:   69:// Implementation of the equality operator (==)
        4:   70:bool Matrix::operator==(const Matrix& other) const {
        4:   71:    return data == other.data;
        -:   72:}
