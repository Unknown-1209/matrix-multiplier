        -:    0:Source:matrix_multiplier.h
        -:    0:Graph:matrix_multiplier.gcno
        -:    0:Data:matrix_multiplier.gcda
        -:    0:Runs:3
        -:    1:#ifndef MATRIX_MULTIPLIER_H
        -:    2:#define MATRIX_MULTIPLIER_H
        -:    3:
        -:    4:#include <vector>
        -:    5:#include <stdexcept>
        -:    6:
        -:    7:class Matrix {
        -:    8:private:
        -:    9:    std::vector<std::vector<int>> data;
        -:   10:    size_t rows_, cols_;
        -:   11:
        -:   12:    // Private setter functions
        2:   13:    void setRows(size_t r) { rows_ = r; }
        2:   14:    void setCols(size_t c) { cols_ = c; }
        -:   15:
        -:   16:public:
        -:   17:    // Default constructor for an empty matrix (0x0)
        -:   18:    Matrix() : rows_(0), cols_(0) {}
        -:   19:
        -:   20:    // Constructor to initialize the matrix with a given size
    #####:   21:    Matrix(size_t r, size_t c) : rows_(r), cols_(c), data(r, std::vector<int>(c)) {}
        -:   22:
        -:   23:    // Constructor to initialize the matrix with a 2D vector
        2:   24:    Matrix(const std::vector<std::vector<int>>& mat) : data(mat) {
        2:   25:        setRows(mat.size());
       2*:   26:        setCols(mat.empty() ? 0 : mat[0].size());
        2:   27:    }
        -:   28:
        -:   29:    // Constructor to initialize from an initializer list
        -:   30:    Matrix(std::initializer_list<std::initializer_list<int>> initList) {
        -:   31:        for (const auto& row : initList) {
        -:   32:            data.emplace_back(row);
        -:   33:        }
        -:   34:        setRows(data.size());
        -:   35:        setCols(data.empty() ? 0 : data[0].size());
        -:   36:    }
        -:   37:
        -:   38:    // Getter functions
    #####:   39:    size_t rows() const { return rows_; }
    #####:   40:    size_t cols() const { return cols_; }
        -:   41:
        -:   42:    // Overload the () operator for easy access to elements
       40:   43:    int& operator()(size_t i, size_t j) {
       40:   44:        return data[i][j];
        -:   45:    }
        -:   46:
        -:   47:    // Const version of the () operator
501000096:   48:    const int& operator()(size_t i, size_t j) const {
501000096:   49:        return data[i][j];
        -:   50:    }
        -:   51:
        -:   52:    // Overload the equality operator (==) for matrix comparison
        -:   53:    bool operator==(const Matrix& other) const;
        -:   54:
        -:   55:    // Function for matrix multiplication (naive)
        -:   56:    friend Matrix multiplyMatrices(const Matrix& A, const Matrix& B);
        -:   57:	
        -:   58:	// Winograd's Algorithm for multiplying matrices
        -:   59:    friend Matrix winogradMultiply(const Matrix& A, const Matrix& B);
        -:   60:};
        -:   61:
        -:   62:#endif // MATRIX_MULTIPLIER_H
        -:   63:
